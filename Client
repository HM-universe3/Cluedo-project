import pygame
from pygame.locals import Rect
import random
import socket
from _thread import *
from threading import *
import sys
import pickle
from Server import Client, ServerClass
from Murderer_class import Murderer
from Network import Network
from JumpToRoomPowerUp import Button
#from JumpToRoomPowerUp import Garage, DiningRoom, Bedroom, Hallway, Office, Bathroom, LivingRoom, GreenHouse, Fountain, 

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
HOST = "192.168.0.50"
PORT = 55555
try: s.bind((HOST, PORT))
except socket.error as e:
    str(e)

# clients = [] 

n = Network()
print(n.send("Hello"))
print(n.send("Working"))

pygame.init()


width = 600
height = 600
WIN = pygame.display.set_mode((width, height))
pygame.display.set_caption("Client")
listOfColours = [(0, 255, 0), ()]
clientNumber = 0
mouse = pygame.mouse.get_pos()

class CheckList:
  def __init__(self):
    self.checkListDisplay = pygame.image.load("Check sheet.png").convert_alpha()
    self.checkListDisplay = pygame.transform.scale(self.checkListDisplay, (600, 600))
    
  def run(self):
    run = True
    while run:
      WIN.fill((202, 228, 241))
      WIN.blit(self.checkListDisplay, (0,0))
      if goBackButton.draw() == True:
          main()

      for event in pygame.event.get():
        if event.type == pygame.QUIT:
          run = False
      pygame.display.update()

# class buttonForJump:
#   def run(self):
#     run = True
#     while run:
#       WIN.fill((202, 228, 241))
#       JumpToRoom()
      

#       for event in pygame.event.get():
#         if event.type == pygame.QUIT:
#           run = False
#       pygame.display.update()


#button images
garage_img = pygame.image.load("garage_button.png").convert_alpha()
dining_img = pygame.image.load("button_dining-room.png").convert_alpha()
bathroom_img = pygame.image.load("button_bathroom.png").convert_alpha()
bedroom_img = pygame.image.load("button_bedroom.png").convert_alpha()
greenhouse_img = pygame.image.load("button_greenhouse.png").convert_alpha()
living_img = pygame.image.load("button_living-room.png").convert_alpha()
office_img = pygame.image.load("button_office.png").convert_alpha()
hall_img = pygame.image.load("button_hallway.png").convert_alpha()
fountain_img = pygame.image.load("button_fountain.png").convert_alpha()
list_img = pygame.image.load("button_check-list.png").convert_alpha()
back_img = pygame.image.load("button_go-back.png").convert_alpha()
#jumpToRoom = pygame.image.load("button_jump-to-room.png").convert_alpha()


#the buttons
checkListButton = Button(25, 525, list_img , 0.7)
goBackButton = Button(75, 10, back_img, 0.7 )
#jumpToRoomButton = Button(430, 525, jumpToRoom, 0.7)
garage_button = Button(25, 525, garage_img, 0.7)
dining_button = Button(20, 275, dining_img, 0.6)
bath_button = Button(205, 60, bathroom_img, 0.6)
bed_button = Button(25, 60, bedroom_img, 0.7)
greenH_button = Button(430, 500, greenhouse_img, 0.7)
living_button = Button(430, 275, living_img, 0.7)
office_button = Button(430, 60, office_img, 0.7)
hall_button = Button(20, 140, hall_img, 0.7)
fountain_button = Button(235, 375, fountain_img, 0.7)

class Player():
  def __init__(self, x, y, width, height, colour, name):
    self.x = x
    self.y = y
    self.width = width
    self.height = height
    self.colour = colour
    self.rect = (self.x,self.y,self.width,self.height)
    self.velocity = 0.5
    self.name = name
    self.inventory = []
  def draw(self, WIN):
    pygame.draw.rect(WIN, self.colour, self.rect)

  def sendPosition(self, client_socket):
    positionData = pickle.dumps((self.x, self.y)) #player's position data
    client_socket.send(positionData)

  def receivePositions(self, client_socket):
    serverData = client_socket.recv(1024)
    positions = pickle.loads(serverData)
    return positions
  def move(self):
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] or keys[pygame.K_a]:
      self.x -= self.velocity

    if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
      self.x += self.velocity

    if keys[pygame.K_UP] or keys[pygame.K_w]:
      self.y -= self.velocity

    if keys[pygame.K_DOWN] or keys[pygame.K_s]:
      self.y += self.velocity

    self.rect = (self.x,self.y,self.width,self.height)

  def pickUpItem(self, item):
    self.inventory.append(item)
    print(f"{self.name} picked up {item.name}")


  def viewInventory(self):
    if self.inventory:
      print(f"{self.name}'s Inventory")
      for item in self.inventory:
        print(item.name) #only prints the name

    else:
      print(f"{self.name}'s inventory is empty")


class Card(Player):
  def __init__(self, cardName):
    self.name = cardName
    self.x = 60
    self.y = 60
    self.width = 50
    self.height = 70
    self.colour = (139, 0, 0)
    self.rect = (self.x, self.y, self.width, self.height)
    

  def draw(self, WIN):
    pygame.draw.rect(WIN, self.colour, self.rect)
    
    

def redrawWindow(WIN, player):
  MainBackground = pygame.image.load("Fountain image.png")
  MainBackground = pygame.transform.scale(MainBackground, (width, height))
  WIN.blit(MainBackground, (0, 0))
  player.draw(WIN)
  pygame.display.update()

characterList = ["Mrs White", "Miss Scarlet", "Miss Peacock", "Professor Plum", "Colnel Mustard", "Reverand Green"]
roomList = ["Garage", "Dining Room", "Bathroom", "Conservatory", "Bedroom", "Study", "Fountain", "Living Room"]
weaponList = ["Lead Pipe", "Rope", "Candlestick", "Revolver", "Spanner", "Dagger"]

socketForServer = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serverAddress = ("", PORT)
socketForServer.connect((HOST, PORT))
socketForServer.listen()
conn, addr = socketForServer.accept()
def main():
  p = Player(50, 50, 50, 50, (0, 255, 0) , "Player 1")
  cardsNotFound = []
  cardObjects = []
  cardsForRoom = []
  with open("CardList.txt") as file:
    cardsNotFound = [line.rstrip() for line in file]
    for line in file:
      card_name = line.strip()
      card_object = Card(card_name)
      cardObjects.append(card_object)
  murder = Murderer(characterList, roomList, weaponList)
  murder.chooseMurdererName()
  murder.chooseMurderRoom()
  murder.chooseMurderWeapon()
  cardsNotFound.remove(murder.murdererName)
  cardsNotFound.remove(murder.murderRoom)
  cardsNotFound.remove(murder.murderWeapon)
    
  run = True
  while run:
    client = Client()
    ServerClass.threaded_client(conn)
    ServerClass.server()
    client.connect()
    client.sendPosition()
    if checkListButton.draw() == True:
      checkListDisplay = CheckList()
      checkListDisplay.run()

    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        run = False

    p.move()
    client.sendPosition()
    otherPlayersPositions = client.receivePositions()
    for playerPosition in otherPlayersPositions:
      p.updatePosition(playerPosition)
    Fountain = Card("Fountain")
    Fountain.draw(WIN)
    redrawWindow(WIN, p)
    player_rect = Rect(p.rect)
    Fountain_rect = Rect(Fountain.rect)
    if player_rect.colliderect(Fountain_rect):
      p.inventory.append(Fountain)
      #cardsNotFound.remove(Fountain.name)
    for card_object in cardsForRoom:
      card_object.draw(WIN)
    

    pygame.display.update()
    pygame.time.Clock().tick(450)
    client.close()
main()


pygame.quit()
sys.exit()
